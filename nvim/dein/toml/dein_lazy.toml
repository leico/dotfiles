

# deoplete------------------

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup   = 1

inoremap  <expr><S-TAB> pumvisible() ? "\<C-n>" : "\<S-TAB>"
'''



hook_post_source = '''
call deoplete#custom#option({
\    'auto_complete_delay' : 0
\  , 'min_pattern_length'  : 1
\  })
'''
on_i = 1



# neosnippet----------------

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = [
    'neosnippet-snippets'
  , 'context_filetype.vim'
]
on_i = 1
hook_source = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"smap <C-k>     <Plug>(neosnippet_expand_or_jump)
"xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

imap  <expr><S-TAB>
 \ pumvisible()                        ? "\<C-n>" : 
 \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<S-TAB>"
smap  <expr><S-TAB>
 \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<S-TAB>"

imap <expr><TAB>
\ (pumvisible() && neosnippet#expandable()) ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
"if has('conceal')
"  set conceallevel=2 concealcursor=niv
"endif
'''




[[plugins]]
repo = 'sudar/vim-arduino-syntax'
on_ft = ['arduino']


[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
repo = 'Shougo/context_filetype.vim'



# neosnippet-cpp----------------
[[plugins]]
repo = 'leico/neosnippet-cpp'
on_ft   = ['c', 'cpp']
depends = ['neosnippet.vim']
hook_source = '''
let g:neosnippet#snippets_directory        = '~/.config/nvim/dein/repos/github.com/leico/neosnippet-cpp/snippets'
let g:neosnippet#disable_runtime_snippets  = { 'c' : 1, 'cpp' : 1 }
let g:neosnippet#enable_auto_clear_markers = 0

'''



[[plugins]]
repo        = 'plasticboy/vim-markdown'
depends     = ['tabular']
on_ft       = ['md', 'markdown']

hook_source = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal          = 0
let g:vim_markdown_math             = 1
let g:vim_markdown_frontmatter      = 1
'''



[[plugins]]
repo = 'godlygeek/tabular'
on_i = 1
